//∙AML
// Copyright (C) 2016-2021 Dmitry Maslov
// For conditions of distribution and use, see readme.txt

#include "pch.h"
#include "winapi.h"

#if AML_OS_WINDOWS
using namespace util;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//   Настройка компоновщика
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if AML_USEASM
	// Весь ассемблерный (MASM) код core расположен в своём собственном сегменте, отличающемся от стандартного сегмента
	// кода .text выравниванием по границе 32 байт. Но в памяти его секция будет начинаться с новой страницы, сразу за
	// последней страницей .text. Объединив эти секции кода, можно сэкономить память, сохранив при этом выравнивание
	#pragma comment(linker, "/merge:_AML@asm=.text")
#endif

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//   Вспомогательные макросы
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//--------------------------------------------------------------------------------------------------------------------------------
#define AML_LOAD_WINAPI_FN(MODULE, NAME) \
	NAME = reinterpret_cast<winapi::NAME##Fn>( \
		::GetProcAddress(MODULE, #NAME));

//--------------------------------------------------------------------------------------------------------------------------------
#define AML_IMPLEMENT_WINAPI_FN(NAME) \
	winapi::NAME##Fn WinAPI::NAME = nullptr; \
	bool WinAPI::Can##NAME() noexcept { \
		if (!s_IsLoaded) \
			Load(); \
		std::atomic_thread_fence(std::memory_order_acquire); \
		return NAME != nullptr; \
	}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//   WinAPI
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool WinAPI::s_IsLoaded = false;

AML_IMPLEMENT_WINAPI_FN(GetTickCount64);

//--------------------------------------------------------------------------------------------------------------------------------
AML_NOINLINE void WinAPI::Load()
{
	if (HMODULE kernel32 = ::GetModuleHandleA("kernel32.dll"))
	{
		AML_LOAD_WINAPI_FN(kernel32, GetTickCount64);
	}

	std::atomic_thread_fence(std::memory_order_release);
	s_IsLoaded = true;
}

#endif // AML_OS_WINDOWS
